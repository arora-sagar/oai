/*
Copyright 2023 The Nephio Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by mockery v2.37.1. DO NOT EDIT.

package controller

import (
	logr "github.com/go-logr/logr"
	appsv1 "k8s.io/api/apps/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/nephio-project/api/workload/v1alpha1"
)

// MockNfResource is an autogenerated mock type for the NfResource type
type MockNfResource struct {
	mock.Mock
}

type MockNfResource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNfResource) EXPECT() *MockNfResource_Expecter {
	return &MockNfResource_Expecter{mock: &_m.Mock}
}

// GetConfigMap provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockNfResource) GetConfigMap(_a0 logr.Logger, _a1 *v1alpha1.NFDeployment, _a2 *ConfigInfo) []*v1.ConfigMap {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*v1.ConfigMap
	if rf, ok := ret.Get(0).(func(logr.Logger, *v1alpha1.NFDeployment, *ConfigInfo) []*v1.ConfigMap); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ConfigMap)
		}
	}

	return r0
}

// MockNfResource_GetConfigMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigMap'
type MockNfResource_GetConfigMap_Call struct {
	*mock.Call
}

// GetConfigMap is a helper method to define mock.On call
//   - _a0 logr.Logger
//   - _a1 *v1alpha1.NFDeployment
//   - _a2 *ConfigInfo
func (_e *MockNfResource_Expecter) GetConfigMap(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockNfResource_GetConfigMap_Call {
	return &MockNfResource_GetConfigMap_Call{Call: _e.mock.On("GetConfigMap", _a0, _a1, _a2)}
}

func (_c *MockNfResource_GetConfigMap_Call) Run(run func(_a0 logr.Logger, _a1 *v1alpha1.NFDeployment, _a2 *ConfigInfo)) *MockNfResource_GetConfigMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logr.Logger), args[1].(*v1alpha1.NFDeployment), args[2].(*ConfigInfo))
	})
	return _c
}

func (_c *MockNfResource_GetConfigMap_Call) Return(_a0 []*v1.ConfigMap) *MockNfResource_GetConfigMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNfResource_GetConfigMap_Call) RunAndReturn(run func(logr.Logger, *v1alpha1.NFDeployment, *ConfigInfo) []*v1.ConfigMap) *MockNfResource_GetConfigMap_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployment provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockNfResource) GetDeployment(_a0 logr.Logger, _a1 *v1alpha1.NFDeployment, _a2 *ConfigInfo) []*appsv1.Deployment {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []*appsv1.Deployment
	if rf, ok := ret.Get(0).(func(logr.Logger, *v1alpha1.NFDeployment, *ConfigInfo) []*appsv1.Deployment); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*appsv1.Deployment)
		}
	}

	return r0
}

// MockNfResource_GetDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployment'
type MockNfResource_GetDeployment_Call struct {
	*mock.Call
}

// GetDeployment is a helper method to define mock.On call
//   - _a0 logr.Logger
//   - _a1 *v1alpha1.NFDeployment
//   - _a2 *ConfigInfo
func (_e *MockNfResource_Expecter) GetDeployment(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockNfResource_GetDeployment_Call {
	return &MockNfResource_GetDeployment_Call{Call: _e.mock.On("GetDeployment", _a0, _a1, _a2)}
}

func (_c *MockNfResource_GetDeployment_Call) Run(run func(_a0 logr.Logger, _a1 *v1alpha1.NFDeployment, _a2 *ConfigInfo)) *MockNfResource_GetDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(logr.Logger), args[1].(*v1alpha1.NFDeployment), args[2].(*ConfigInfo))
	})
	return _c
}

func (_c *MockNfResource_GetDeployment_Call) Return(_a0 []*appsv1.Deployment) *MockNfResource_GetDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNfResource_GetDeployment_Call) RunAndReturn(run func(logr.Logger, *v1alpha1.NFDeployment, *ConfigInfo) []*appsv1.Deployment) *MockNfResource_GetDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetService provides a mock function with given fields:
func (_m *MockNfResource) GetService() []*v1.Service {
	ret := _m.Called()

	var r0 []*v1.Service
	if rf, ok := ret.Get(0).(func() []*v1.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Service)
		}
	}

	return r0
}

// MockNfResource_GetService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetService'
type MockNfResource_GetService_Call struct {
	*mock.Call
}

// GetService is a helper method to define mock.On call
func (_e *MockNfResource_Expecter) GetService() *MockNfResource_GetService_Call {
	return &MockNfResource_GetService_Call{Call: _e.mock.On("GetService")}
}

func (_c *MockNfResource_GetService_Call) Run(run func()) *MockNfResource_GetService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNfResource_GetService_Call) Return(_a0 []*v1.Service) *MockNfResource_GetService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNfResource_GetService_Call) RunAndReturn(run func() []*v1.Service) *MockNfResource_GetService_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceAccount provides a mock function with given fields:
func (_m *MockNfResource) GetServiceAccount() []*v1.ServiceAccount {
	ret := _m.Called()

	var r0 []*v1.ServiceAccount
	if rf, ok := ret.Get(0).(func() []*v1.ServiceAccount); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.ServiceAccount)
		}
	}

	return r0
}

// MockNfResource_GetServiceAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceAccount'
type MockNfResource_GetServiceAccount_Call struct {
	*mock.Call
}

// GetServiceAccount is a helper method to define mock.On call
func (_e *MockNfResource_Expecter) GetServiceAccount() *MockNfResource_GetServiceAccount_Call {
	return &MockNfResource_GetServiceAccount_Call{Call: _e.mock.On("GetServiceAccount")}
}

func (_c *MockNfResource_GetServiceAccount_Call) Run(run func()) *MockNfResource_GetServiceAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNfResource_GetServiceAccount_Call) Return(_a0 []*v1.ServiceAccount) *MockNfResource_GetServiceAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNfResource_GetServiceAccount_Call) RunAndReturn(run func() []*v1.ServiceAccount) *MockNfResource_GetServiceAccount_Call {
	_c.Call.Return(run)
	return _c
}

// createNetworkAttachmentDefinitionNetworks provides a mock function with given fields: _a0, _a1
func (_m *MockNfResource) createNetworkAttachmentDefinitionNetworks(_a0 string, _a1 *v1alpha1.NFDeploymentSpec) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *v1alpha1.NFDeploymentSpec) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *v1alpha1.NFDeploymentSpec) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *v1alpha1.NFDeploymentSpec) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNfResource_createNetworkAttachmentDefinitionNetworks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createNetworkAttachmentDefinitionNetworks'
type MockNfResource_createNetworkAttachmentDefinitionNetworks_Call struct {
	*mock.Call
}

// createNetworkAttachmentDefinitionNetworks is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *v1alpha1.NFDeploymentSpec
func (_e *MockNfResource_Expecter) createNetworkAttachmentDefinitionNetworks(_a0 interface{}, _a1 interface{}) *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call {
	return &MockNfResource_createNetworkAttachmentDefinitionNetworks_Call{Call: _e.mock.On("createNetworkAttachmentDefinitionNetworks", _a0, _a1)}
}

func (_c *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call) Run(run func(_a0 string, _a1 *v1alpha1.NFDeploymentSpec)) *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*v1alpha1.NFDeploymentSpec))
	})
	return _c
}

func (_c *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call) Return(_a0 string, _a1 error) *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call) RunAndReturn(run func(string, *v1alpha1.NFDeploymentSpec) (string, error)) *MockNfResource_createNetworkAttachmentDefinitionNetworks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNfResource creates a new instance of MockNfResource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNfResource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNfResource {
	mock := &MockNfResource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
